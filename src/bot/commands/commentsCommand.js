// src/bot/commands/commentsCommand.js

import { InlineKeyboard } from "grammy";
import { getComments } from "../../services/githubService.js"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
import { getTaskDetails } from "../../services/githubService.js"; // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á
import db from "../../db/models/index.js";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
function escapeMarkdownV2(text) {
  return text.replace(/([\\_*[\]()>#+.!$&|{}])/g, "\\$1").replace(/-/g, "\\-"); // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–∏—Å–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserAuthorization(ctx) {
  const chatId = ctx.chat.id;
  const user = await db.User.findOne({ where: { telegram_id: chatId } });
  if (!user || !user.github_token) {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  }
  return user.github_token; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–¥–∞—á–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
export async function showTaskComments(ctx) {
  const action = ctx.callbackQuery.data;
  const taskId = action.split("_").slice(2).join("_"); // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏

  console.log("–ü–æ–ª—É—á–µ–Ω taskId:", taskId);

  try {
    const userToken = await checkUserAuthorization(ctx); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    if (!userToken) return; // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω, –≤—ã—Ö–æ–¥–∏–º
    const comments = await getComments(userToken, taskId); // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

    let commentsText = escapeMarkdownV2("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç."); // –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç

    if (comments && comments.length > 0) {
      commentsText = "";
      const chunkSize = 4000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      let currentChunk = "";

      for (const comment of comments) {
        const commentText = `
üñä **–ê–≤—Ç–æ—Ä:** ${escapeMarkdownV2(comment.user.login)}
üìÖ **–î–∞—Ç–∞:** ${escapeMarkdownV2(new Date(comment.createdAt).toLocaleString())}
üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:**\n${escapeMarkdownV2(comment.body)}
`;

        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
        if (currentChunk.length + commentText.length > chunkSize) {
          await ctx.reply(currentChunk, { parse_mode: "MarkdownV2" });
          currentChunk = commentText; // –ù–æ–≤—ã–π –±–ª–æ–∫
        } else {
          currentChunk += commentText;
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–∏
      if (currentChunk) {
        await ctx.reply(currentChunk, { parse_mode: "MarkdownV2" });
      }
    } else {
      // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(commentsText, { parse_mode: "MarkdownV2" });
    }

    await ctx.answerCallbackQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", error);
    await ctx.reply(
      escapeMarkdownV2(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${error.message}`), // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      { parse_mode: "MarkdownV2" }
    );
  }
}
