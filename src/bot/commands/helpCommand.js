//–ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
// –û–±—ä–µ–∫—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
const commandsDescription = new Map([
	[
		'/auth',
		'–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.',
	],
	['/help', '–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è.'],
	[
		'/retry',
		'–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ).',
	],
	['/cancel', '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.'],
])

/**
 * –ö–æ–º–∞–Ω–¥–∞ /help: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
 * @param {Context} ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
 */
export async function helpCommand(ctx) {
	let message = 'ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n'

	for (const [command, description] of commandsDescription) {
		message += `‚Ä¢ ${command} ‚Äî ${description}\n`
	}

	await ctx.reply(message, { parse_mode: 'Markdown' })
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ø–∏—Å–æ–∫ /help
 * @param {string} command –ò–º—è –∫–æ–º–∞–Ω–¥—ã
 * @param {string} description –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
 */
export function addCommandDescription(command, description) {
	commandsDescription.set(command, description)
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–ø–∏—Å–∫–∞ /help
 * @param {string} command –ò–º—è –∫–æ–º–∞–Ω–¥—ã
 */
export function removeCommandDescription(command) {
	commandsDescription.delete(command)
}
